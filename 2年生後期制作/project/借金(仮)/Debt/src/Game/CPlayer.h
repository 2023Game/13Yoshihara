#pragma once
//キャラクタクラスのインクルード
#include "CXCharacter.h"
#include "CColliderLine.h"
#include "CColliderCapsule.h"
#include "CColliderSphere.h"
#include "CRideableObject.h"
#include "CSound.h"

class CFlamethrower;

/*
プレイヤークラス
キャラクタクラスを継承
*/
class CPlayer : public CXCharacter
{
public:
	//インスタンスのポインタの取得
	static CPlayer* Instance();

	// コンストラクタ
	CPlayer();
	// デストラクタ
	~CPlayer();

	// 更新
	void Update();

	/// <summary>
	/// 衝突処理
	/// </summary>
	/// <param name="self">衝突した自身のコライダー</param>
	/// <param name="other">衝突した相手のコライダー</param>
	/// <param name="hit">衝突した時の情報</param>
	void Collision(CCollider* self, CCollider* other, const CHitInfo& hit) override;

	// 描画
	void Render();

	//// mIsInteractの値を設定する
	//// CInteractObjectで設定
	//void SetInteract(bool interact);
	////mIsInteractの値を返す
	//bool GetInteract();

	//// インタラクトオブジェクトを設定する
	//// CInteractObjectで設定
	//void SetInteractObject(std::string interactName);
	//// プレイヤーのインタラクトオブジェクトを返す
	//std::string GetInteractObject();
private:
	// キーの入力情報から移動ベクトルを求める
	CVector CalcMoveVec() const;

	// 待機状態
	void UpdateIdle();
	// 攻撃
	void UpdateAttack();
	// 攻撃終了待ち
	void UpdateAttackWait();
	// ジャンプ開始
	void UpdateJumpStart();
	// ジャンプ中
	void UpdateJump();
	// ジャンプ終了
	void UpdateJumpEnd();
	//// インタラクト中
	//void UpdateInteract();

	// 移動の更新処理
	void UpdateMove();

	// モーションブラーの更新処理
	void UpdateMotionBlur();

	// アニメーションの種類
	enum class EAnimType
	{
		None = -1,

		eTPose,		// Tポーズ
		eIdle,		// 待機
		eWalk,		// 歩行
		eAttack,	// 攻撃
		eJumpStart,	// ジャンプ開始
		eJump,		// ジャンプ中
		eJumpEnd,	// ジャンプ終了

		Num
	};
	// アニメーション切り替え
	void ChangeAnimation(EAnimType type);

	// プレイヤーのインスタンス
	static CPlayer* spInstance;

	// アニメーションデータ
	struct AnimData
	{
		std::string path;	// アニメーションデータのパス
		bool loop;			// ループするかどうか
		float frameLength;	// アニメーションのフレーム数
	};
	// アニメーションデータのテーブル
	static const AnimData ANIM_DATA[];

	// プレイヤーの状態
	enum class EState
	{
		eIdle,		// 待機
		eAttack,	// 攻撃
		eAttackWait,// 攻撃終了待ち
		eJumpStart,	// ジャンプ開始
		eJump,		// ジャンプ中
		eJumpEnd,	// ジャンプ終了
		//eInteract,	//インタラクト中
	};
	EState mState;	// プレイヤーの状態

	//// インタラクト中のオブジェクト
	//enum class EInteractObject
	//{
	//	None = -1,

	//	eComputer,	//パソコン
	//	eDoor,		//ドア
	//};
	//EInteractObject mInteractObject;	//インタラクト中のオブジェクト

	//bool mIsInteract; // インタラクト範囲内かどうか

	CVector mMoveSpeed;	// 前後左右の移動速度
	float mMoveSpeedY;	// 重力やジャンプによる上下の移動速度

	bool mIsGrounded;	// 接地しているかどうか
	CVector mGroundNormal;	// 接地している地面の法線

	CColliderCapsule* mpColliderCapsule;
	CColliderLine* mpColliderLine;
	CColliderSphere* mpInteractColliderSphere;
	CTransform* mpRideObject;

	CSound* mpSlashSE;
	bool mIsPlayedSlashSE;
	bool mIsSpawnedSlashEffect;

	// 火炎放射エフェクト
	CFlamethrower* mpFlamethrower;

	// モーションブラーを掛ける残り時間
	float mMotionBlurRemainTime;
};
